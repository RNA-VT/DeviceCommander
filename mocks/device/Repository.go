// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	device "github.com/rna-vt/devicecommander/pkg/device"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 device.NewDeviceParams) (*device.Device, error) {
	ret := _m.Called(_a0)

	var r0 *device.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(device.NewDeviceParams) (*device.Device, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(device.NewDeviceParams) *device.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*device.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(device.NewDeviceParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *Repository) Delete(_a0 string) (*device.Device, error) {
	ret := _m.Called(_a0)

	var r0 *device.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*device.Device, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *device.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*device.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *Repository) Get(_a0 device.Device) ([]*device.Device, error) {
	ret := _m.Called(_a0)

	var r0 []*device.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(device.Device) ([]*device.Device, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(device.Device) []*device.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*device.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(device.Device) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]*device.Device, error) {
	ret := _m.Called()

	var r0 []*device.Device
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*device.Device, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*device.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*device.Device)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *Repository) Update(_a0 device.UpdateDeviceParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(device.UpdateDeviceParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
