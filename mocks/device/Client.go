// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	http "net/http"

	device "github.com/rna-vt/devicecommander/pkg/device"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// EvaluateHealthCheckResponse provides a mock function with given fields: resp, d
func (_m *Client) EvaluateHealthCheckResponse(resp *http.Response, d device.Device) bool {
	ret := _m.Called(resp, d)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Response, device.Device) bool); ok {
		r0 = rf(resp, d)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EvaluateSpecificationResponse provides a mock function with given fields: _a0
func (_m *Client) EvaluateSpecificationResponse(_a0 device.Specification) (device.Device, error) {
	ret := _m.Called(_a0)

	var r0 device.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(device.Specification) (device.Device, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(device.Specification) device.Device); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(device.Device)
	}

	if rf, ok := ret.Get(1).(func(device.Specification) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Health provides a mock function with given fields: _a0
func (_m *Client) Health(_a0 device.Device) (*http.Response, error) {
	ret := _m.Called(_a0)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(device.Device) (*http.Response, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(device.Device) *http.Response); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(device.Device) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Info provides a mock function with given fields: _a0
func (_m *Client) Info(_a0 device.Device) (device.NewDeviceParams, error) {
	ret := _m.Called(_a0)

	var r0 device.NewDeviceParams
	var r1 error
	if rf, ok := ret.Get(0).(func(device.Device) (device.NewDeviceParams, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(device.Device) device.NewDeviceParams); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(device.NewDeviceParams)
	}

	if rf, ok := ret.Get(1).(func(device.Device) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Specification provides a mock function with given fields: _a0
func (_m *Client) Specification(_a0 device.Device) (device.Specification, error) {
	ret := _m.Called(_a0)

	var r0 device.Specification
	var r1 error
	if rf, ok := ret.Get(0).(func(device.Device) (device.Specification, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(device.Device) device.Specification); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(device.Specification)
	}

	if rf, ok := ret.Get(1).(func(device.Device) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
