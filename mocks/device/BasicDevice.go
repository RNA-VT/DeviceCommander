// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	device "github.com/rna-vt/devicecommander/src/device"
	mock "github.com/stretchr/testify/mock"
)

// BasicDevice is an autogenerated mock type for the BasicDevice type
type BasicDevice struct {
	mock.Mock
}

// Activate provides a mock function with given fields:
func (_m *BasicDevice) Activate() {
	_m.Called()
}

// ProcessHealthCheckResult provides a mock function with given fields: result
func (_m *BasicDevice) ProcessHealthCheckResult(result bool) int {
	ret := _m.Called(result)

	var r0 int
	if rf, ok := ret.Get(0).(func(bool) int); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RunHealthCheck provides a mock function with given fields: client
func (_m *BasicDevice) RunHealthCheck(client device.Client) error {
	ret := _m.Called(client)

	var r0 error
	if rf, ok := ret.Get(0).(func(device.Client) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// URL provides a mock function with given fields:
func (_m *BasicDevice) URL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Unresponsive provides a mock function with given fields:
func (_m *BasicDevice) Unresponsive() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// protocol provides a mock function with given fields:
func (_m *BasicDevice) protocol() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
