// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	http "net/http"

	device "github.com/rna-vt/devicecommander/device"

	io "io"

	mock "github.com/stretchr/testify/mock"

	model "github.com/rna-vt/devicecommander/graph/model"
)

// IDevice is an autogenerated mock type for the IDevice type
type IDevice struct {
	mock.Mock
}

// CheckHealth provides a mock function with given fields:
func (_m *IDevice) CheckHealth() (*device.Device, error) {
	ret := _m.Called()

	var r0 *device.Device
	if rf, ok := ret.Get(0).(func() *device.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*device.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateHealthCheckResponse provides a mock function with given fields: resp
func (_m *IDevice) EvaluateHealthCheckResponse(resp *http.Response) bool {
	ret := _m.Called(resp)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Response) bool); ok {
		r0 = rf(resp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewDeviceFromRequestBody provides a mock function with given fields: body
func (_m *IDevice) NewDeviceFromRequestBody(body io.ReadCloser) (model.NewDevice, error) {
	ret := _m.Called(body)

	var r0 model.NewDevice
	if rf, ok := ret.Get(0).(func(io.ReadCloser) model.NewDevice); ok {
		r0 = rf(body)
	} else {
		r0 = ret.Get(0).(model.NewDevice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.ReadCloser) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessHealthCheckResult provides a mock function with given fields: result
func (_m *IDevice) ProcessHealthCheckResult(result bool) {
	_m.Called(result)
}

// URL provides a mock function with given fields:
func (_m *IDevice) URL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Unresponsive provides a mock function with given fields:
func (_m *IDevice) Unresponsive() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// protocol provides a mock function with given fields:
func (_m *IDevice) protocol() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
