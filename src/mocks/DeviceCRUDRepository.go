// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/rna-vt/devicecommander/src/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// DeviceCRUDRepository is an autogenerated mock type for the DeviceCRUDRepository type
type DeviceCRUDRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *DeviceCRUDRepository) Create(_a0 model.NewDevice) (*model.Device, error) {
	ret := _m.Called(_a0)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(model.NewDevice) *model.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.NewDevice) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *DeviceCRUDRepository) Delete(_a0 string) (*model.Device, error) {
	ret := _m.Called(_a0)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(string) *model.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *DeviceCRUDRepository) Get(_a0 model.Device) ([]*model.Device, error) {
	ret := _m.Called(_a0)

	var r0 []*model.Device
	if rf, ok := ret.Get(0).(func(model.Device) []*model.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Device) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *DeviceCRUDRepository) GetAll() ([]*model.Device, error) {
	ret := _m.Called()

	var r0 []*model.Device
	if rf, ok := ret.Get(0).(func() []*model.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *DeviceCRUDRepository) Update(_a0 model.UpdateDevice) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UpdateDevice) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
