// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	io "io"

	device "github.com/rna-vt/devicecommander/src/device"

	mock "github.com/stretchr/testify/mock"

	model "github.com/rna-vt/devicecommander/graph/model"

	uuid "github.com/google/uuid"
)

// Device is an autogenerated mock type for the Device type
type Device struct {
	mock.Mock
}

// ID provides a mock function with given fields:
func (_m *Device) ID() uuid.UUID {
	ret := _m.Called()

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// NewDeviceFromRequestBody provides a mock function with given fields: body
func (_m *Device) NewDeviceFromRequestBody(body io.ReadCloser) (model.NewDevice, error) {
	ret := _m.Called(body)

	var r0 model.NewDevice
	if rf, ok := ret.Get(0).(func(io.ReadCloser) model.NewDevice); ok {
		r0 = rf(body)
	} else {
		r0 = ret.Get(0).(model.NewDevice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.ReadCloser) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessHealthCheckResult provides a mock function with given fields: result
func (_m *Device) ProcessHealthCheckResult(result bool) int {
	ret := _m.Called(result)

	var r0 int
	if rf, ok := ret.Get(0).(func(bool) int); ok {
		r0 = rf(result)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// RunHealthCheck provides a mock function with given fields: client
func (_m *Device) RunHealthCheck(client device.Client) error {
	ret := _m.Called(client)

	var r0 error
	if rf, ok := ret.Get(0).(func(device.Client) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// URL provides a mock function with given fields:
func (_m *Device) URL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Unresponsive provides a mock function with given fields:
func (_m *Device) Unresponsive() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// protocol provides a mock function with given fields:
func (_m *Device) protocol() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
